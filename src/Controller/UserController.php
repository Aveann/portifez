<?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Security\Core\Authorization\AuthorizationCheckerInterface;
use Symfony\Component\Security\Core\Exception\AccessDeniedException;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;

use App\Entity\User;
use App\Entity\Portif;

use App\Form\UserEmailEditForm;
use App\Form\UserPasswordEditForm;
use App\Form\UserEditForm;

use App\Service\FileUploader;

class UserController extends AbstractController
{
	/**
	 * Vérifie si l'utilisateur passé en paramètre correspond à l'utilisateur
	 * connecté.
	 * @return bool
	 */
	private function isUserProfile($id)
    {
        $user = $this->getUser();
		if($user){
			return $id == $user->getId();
		} else {
			return false;
		}
    }
	
	/**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
	
    /**
	 * 
     * @Route("/user/{id}", name="user")
     */
    public function index($id)
    {
		$repository = $this->getDoctrine()->getRepository(User::class);
		$user = $repository->find($id);
		
		//si l'utilisateur passé en paramètre existe
		if($user){
			$repository = $this->getDoctrine()->getRepository(Portif::class);
			$portifs = $repository->findBy(['user' => $id]);
		
			return $this->render('user/user.html', [
				'portifs' => $portifs,
				'isUserProfile' => $this->isUserProfile($id),
				'user' => $user,
				'block_title' => $user->getNickname(),
			]);
		}
		
		return $this->render('user/error.html.twig', [
			'block_title' => 'Utilisateur inconnu'
		]);
    }
	
	/**
     * @Route("/user/{id}/edit", name="user_edit")
     */
    public function user_edit(Request $request, $id)
    {
		$error = "";
		$success = "";
		
		//si un utilisateur tente d'accéder à la route "user_edit" pour un
		//utilisateur autre que lui même
		if (!$this->isUserProfile($id)) {
			throw new AccessDeniedException('Oups... Impossible d\'accéder à cette page.');
		} else {
			$user = $this->getUser();
			
			$avatarName = $user->getAvatar();
			$form = $this->createForm(UserEditForm::class, $user, 
				array(
					'action' => $this->generateUrl('user_edit', ['id' => $user->getId()]),
					'method' => 'PATCH'
				)
			);
				
			$form->handleRequest($request);
			
			if ($form->isSubmitted() && $form->isValid()) {
				
				if($form['avatar']->getData() != ''){
					
					$fileUploader = new FileUploader($this->getParameter('avatar_directory'));
					
					$avatar = $form->get('avatar')->getData();
					$avatarName = $fileUploader->upload($avatar);
				
				} else {
					$avatarName = "";
				}
				
				$user->setAvatar($avatarName);
				
				$success = "Vos informations ont correctement été mises à jour.";
				
				$entityManager = $this->getDoctrine()->getManager();
				$entityManager->flush();
			}
		}
		
        return $this->render('user/form_user_edit.html', [
			'block_title' => 'Paramètre utilisateur',
			'form' => $form->createView(),
			'error' => $error,
			'success' => $success
        ]);
    }	
	
	/**
     * @Route("/user/{id}/change-email", name="change_email")
     */
    public function change_email(Request $request, $id)
    {
		$error = "";
		$success = "";
		
		//si un utilisateur tente de modifier des infos pour un
		//utilisateur autre que lui même
		if (!$this->isUserProfile($id)) {
			throw new AccessDeniedException('Unable to access this page!');
		} else {
			$user = $this->getUser();
			$form = $this->createForm(UserEmailEditForm::class, $user, array(
				'action' => $this->generateUrl('change_email', ['id' => $user->getId()])
			));
				
			$form->handleRequest($request);
			
			if ($form->isSubmitted() && $form->isValid()) {

				$entityManager = $this->getDoctrine()->getManager();
				
				$email = $form['email']->getData();
				
				//vérifier si un utilisaeur avec cet email existe déjà
				$userCheck = $entityManager->getRepository(User::class)->findOneBy(['email' => $email]);
				
				
				//s'il n'existe pas, on enregistre l'utilisateur
				if(!$userCheck){
					$success = "Votre nouvelle adresse email '" . $email . "' a bien été enregistrée.";
					
					$entityManager->flush();
				} else {
					$error = "Un utilisateur avec cet email existe déjà.";
				}
			}
		}
		
        return $this->render('user/form_email_edit.html.twig', [
			'form' => $form->createView(),
			'error' => $error,
			'success' => $success
        ]);
    }
	
	/**
     * @Route("/user/{id}/change-password", name="change_password")
     */
    public function change_password(Request $request, UserPasswordEncoderInterface $passwordEncoder, $id)
    {
		$error = "";
		$success = "";
		//si un utilisateur tente d'accéder à la route "user_setting" pour un
		//utilisateur autre que lui même
		if (!$this->isUserProfile($id)) {
			throw new AccessDeniedException('Unable to access this page!');
		} else {
			$user = $this->getUser();
			$form = $this->createForm(UserPasswordEditForm::class, $user, array(
				'action' => $this->generateUrl(
					'change_password', ['id' => $user->getId()]
				)
			));
			
			$form->handleRequest($request);
			
			if ($form->isSubmitted() && $form->isValid()) {
				$success = "Votre mot de passe a bien été changé .";
				
				$entityManager = $this->getDoctrine()->getManager();
				
				$password = $passwordEncoder->encodePassword($user, $user->getPlainPassword());

				$user->setPassword($password);
				
				$entityManager->flush();
			}
			
		}
		
        return $this->render('user/form_password_edit.html.twig', [
			'form' => $form->createView(),
			'error' => $error,
			'success' => $success
        ]);
    }
	
}
